We have a Task Manager Desktop Application with a Task List Page that allows users to manage the tasks efficiently. Your assignment is to implement the frontend application layer of this page and ensure that it integrates with a mock API for task creation.

Requirements
You are required to implement the Task List Page with the following functionalities:
Task List Grid View
Display a list of tasks in a grid format.
Columns: Task Title, Priority, Due Date, Associated Record, Assigned To.
A checkbox to mark tasks as complete, showing a confirmation dialog before updating the task.
Implement pagination for task lists.
Task Type Representation
The "To Do" column should represent task types with icons:
Call ðŸ“ž
Email ðŸ“§
Meeting ðŸ“…
Quick Filters
Filters for Task Type, Due Date, Assigned To, and Priority.
The filtered results should update dynamically without a page refresh.

Mark Task as Complete
Clicking the checkbox should open a confirmation dialog.
If confirmed, send a request to a mock API to mark the task as complete.
Show success/failure response in a snackbar.

Create Task Form
Clicking the "Create Task" button opens a modal form with the following fields:
Task Name (Required)
Task Type (Required - Call, Email, Meeting)
Priority (Required - High, Medium, Low)
Associated Record (Optional - Any text or dropdown selection)
Assigned To (Optional - User selection)
Due Date & Time (Required - Date and Time picker)
Add Notes (Optional - Textarea)
Form should have proper validations (e.g., required fields, proper date format, etc.).
On successful submission, the task should appear in the task list grid.
A snackbar message should appear confirming task creation.
Mock API Integration
Send task creation requests to a mock API.
Show API response messages in a snackbar.

Evaluation Criteria
We are looking for candidates who can:
Deliver a pixel-perfect design matching the provided UI.
Implement a well-structured, maintainable, and reusable frontend codebase.
Ensure proper form validation and data handling.
Integrate the mock API correctly, ensuring requests are properly structured.

Tech Stack & Tools
React.js (or any modern frontend framework of your choice)
Material UI (or any similar UI library)
State Management (Context API, Redux, or any preferred method)
Axios or Fetch API for API requests
Mock API (Use a simple JSON placeholder)
